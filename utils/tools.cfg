# When this event is fired, it expects $armorymod.weapon_search_array to be the name of 
# 	an array of attacks, example unit.attack
# This event will search the array to find the most powerful weapon in it (based purely on damage= and number=)
# When finished, it replaces $armorymod.weapon_search_array to include the index of the best attack, example unit.attack[1]
# 	and $armorymod.best_weapon_index will be the index, example 1
#define WORKSPACE
armorymod.WS.#enddef
[event]
	name=armory_find_strongest_weapon
	id=armory_find_strongest_weapon
	first_time_only=no
	{VARIABLE {WORKSPACE}best_damage 0}
	{VARIABLE {WORKSPACE}best_index 0}
	[for]
		array=$armorymod.weapon_search_array
		variable={WORKSPACE}iter
		[do]
			{VARIABLE {WORKSPACE}current_damage $$armorymod.weapon_search_array|[${WORKSPACE}iter].damage}
			{VARIABLE_OP {WORKSPACE}current_damage multiply $$armorymod.weapon_search_array|[${WORKSPACE}iter].number}
			{IF_VAR {WORKSPACE}current_damage greater_than ${WORKSPACE}best_damage (
				[then]
					{VARIABLE {WORKSPACE}best_index ${WORKSPACE}iter|}
					{VARIABLE {WORKSPACE}best_damage ${WORKSPACE}current_damage|}
				[/then]
			)}
		[/do]
	[/for]
	{VARIABLE armorymod.weapon_search_array $armorymod.weapon_search_array|[${WORKSPACE}best_index|]}
	{VARIABLE armorymod.best_weapon_index ${WORKSPACE}best_index|}
	{CLEAR_VARIABLE armorymod.WS}
[/event]
#undef WORKSPACE



# This event keeps a unit's "skills" up to date after an advancement. This is a delicate process:
# 	For example, an Orcish Warrior's greatsword skill should replace the Grunt's sword skill
# 	But, an Elvish Druid's thorns skill should not replace the Elvish Druid's entangle skill.
# It's tricky because in both situations, the attacks are defined to have the same weapon type
# 	(which is different from damage type; weapon types are defined by me).
#	So, we must be able to tell which skills are old and which are new; the unit can have multiple skills
# 	of a single weapon type, but only if they all appeared during the same level.
# Luckily, that information is provided; the unit has just advanced (passed as primary unit). it has not
# 	yet had any variables set; it's new attacks are un-cataloged. Additionally, all of its extra weapons have
# 	been temporarily removed to the other_weapons variable. However it still has the old unit's "skills" saved in its 
# 	wml variables. 
# SO! What exactly should this event do? The normal event for updating variables mark the new weapons as skills, we have
# 	no need to do that. All we must do is remove old skills that have the same weapon type as the new attacks.
#define WORKSPACE
armorymod.advance_skills.#enddef
[event]
	name=armory_advance_skills
	id=armory_advance_skills
	first_time_only=no
	# Therefore, we loop through the new attacks...
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		variable={WORKSPACE}unit
	[/store_unit]
	[for]
		array={WORKSPACE}unit.attack
		variable={WORKSPACE}iter
		[do]
			# and if this attack is a weapon...
			[switch]
				variable={WORKSPACE}unit.attack[${WORKSPACE}iter|].name
				[case]
					value=$armorymod_ref.full_weapon_list|
					{VARIABLE {WORKSPACE}temp_range ${WORKSPACE}unit.attack[${WORKSPACE}iter|].range|}
					{CLEAR_VARIABLE {WORKSPACE}temp_names}
					
					# make a list of weapons sharing its weapon types
					[for]
						array=armorymod_ref.${WORKSPACE}temp_range|
						variable={WORKSPACE}iter_2
						[do]
							[if]
								[variable]
									name=armorymod_ref.${WORKSPACE}temp_range|[${WORKSPACE}iter_2|].names
									contains=${WORKSPACE}unit.attack[${WORKSPACE}iter|].name|
								[/variable]
								[then]
									# basically, temp_names += ,$the_new_names_we_just_found|
									# because it's possible the attack name fits in more than one weapon type (for example, halberd is both spear and axe)
									{VARIABLE {WORKSPACE}temp_names ${WORKSPACE}temp_names|,$armorymod_ref.${WORKSPACE}temp_range|[${WORKSPACE}iter_2|].names|}
								[/then]
							[/if]
						[/do]
					[/for]
					
					# next loop through the old skills...
					[for]
						array={WORKSPACE}unit{DOT}skills
						variable={WORKSPACE}iter_2
						reverse=yes
						[do]
							# and if this skill's name is in the list we just compiled, and the range matches...
							[if]
								[variable]
									name={WORKSPACE}temp_names
									contains=${WORKSPACE}unit{DOT}skills[${WORKSPACE}iter_2|].name|
								[/variable]
								[variable]
									name={WORKSPACE}unit{DOT}skills[${WORKSPACE}iter_2|].range
									equals=${WORKSPACE}unit.attack[${WORKSPACE}iter|].range|
								[/variable]
								[then]
									# then erase this skill.
									{CLEAR_VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}iter_2|]}
								[/then]
							[/if]
						[/do]
					[/for]
					
					# at this point, we have finished with this new weapon, so continue looping.
				[/case]
			[/switch]
		[/do]
	[/for]
	
	# when this loop exists, we have examined all the new unit's attacks and removed all matching skills.
	# As said, the normal update_unit_variables event will make new skills using the new attacks, so we're finished here...
	
	# ... except a bug; apparently because we're interrupting the advancement process, resilient units get the correct max_hitpoints,
	# but not the correct hitpoints. Let's fix that:
	{VARIABLE {WORKSPACE}unit.hitpoints ${WORKSPACE}unit.max_hitpoints|}
	
	[unstore_unit]
		variable={WORKSPACE}unit
		advance=no
	[/unstore_unit]
	{CLEAR_VARIABLE armorymod.advance_skills}
[/event]

#undef WORKSPACE
















