# since we so often reach into this specific part of a stored unit:
#define DOT
.variables.armorymod.#enddef



# shortcut for checking if a certain side is human
#define IF_IS_HUMAN SIDE WML
	[store_side]
		side={SIDE}
		variable=armorymod.temp_side
	[/store_side]
	{VARIABLE armorymod.side_controller $armorymod.temp_side.controller|}
	{CLEAR_VARIABLE armorymod.temp_side}
	[sync_variable]
		name=armorymod.side_controller
	[/sync_variable]
	{IF_VAR armorymod.side_controller equals human (
		{WML}
	)}
	{CLEAR_VARIABLE armorymod.side_controller}
#enddef



# copies a weapon from SOURCE_CONTAINER to TARGET_ARRAY 
# the new attack will be at the front of the array
# example:
# {COPY_WEAPON unit.attack unit{DOT}weapons[2]}
#define COPY_WEAPON TARGET_ARRAY SOURCE_CONTAINER
	[set_variables]
		name={TARGET_ARRAY}
		mode=insert
		to_variable={SOURCE_CONTAINER}
	[/set_variables]
#enddef



# While I'm constantly setting attack damage, it's important to take traits into account.
# this macro checks TRAIT_ARRAY (example unit.modifications.trait) for strong, weak, or dextrous, 
# and applies their affects to the attack in ATTACK_VAR (example unit.attack[1])
#define APPLY_TRAIT_DAMAGE ATTACK_VAR TRAIT_ARRAY
	[for]
		array={TRAIT_ARRAY}
		variable=armorymod.apply_traits_iter
		[do]
			[switch]
				variable={TRAIT_ARRAY}[$armorymod.apply_traits_iter].id
				[case]
					value=strong
					{IF_VAR {ATTACK_VAR}.range equals melee (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage add 1}
						[/then]
					)}
				[/case]
				[case]
					value=weak
					{IF_VAR {ATTACK_VAR}.range equals melee (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage sub 1}
						[/then]
					)}
				[/case]
				[case]
					value=dextrous
					{IF_VAR {ATTACK_VAR}.range equals ranged (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage add 1}
						[/then]
					)}
				[/case]
			[/switch]
		[/do]
	[/for]
	{CLEAR_VARIABLE armorymod.apply_traits_iter}
#enddef



# Similar to above, i have to be careful not to take trait damage into account when
# saving attacks as weapons or skills:
#define REMOVE_TRAIT_DAMAGE ATTACK_VAR TRAIT_ARRAY
	[for]
		array={TRAIT_ARRAY}
		variable=armorymod.apply_traits_iter
		[do]
			[switch]
				variable={TRAIT_ARRAY}[$armorymod.apply_traits_iter].id
				[case]
					value=strong
					{IF_VAR {ATTACK_VAR}.range equals melee (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage sub 1}
						[/then]
					)}
				[/case]
				[case]
					value=weak
					{IF_VAR {ATTACK_VAR}.range equals melee (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage add 1}
						[/then]
					)}
				[/case]
				[case]
					value=dextrous
					{IF_VAR {ATTACK_VAR}.range equals ranged (
						[then]
							{VARIABLE_OP {ATTACK_VAR}.damage sub 1}
						[/then]
					)}
				[/case]
			[/switch]
		[/do]
	[/for]
	{CLEAR_VARIABLE armorymod.apply_traits_iter}
#enddef

# Moves UNIT_WEAPON_VAR to the ground at X Y
# example:
# {DROP_WEAPON unit{DOT}weapons[1] $x1| $y1|}
# NOTE: it is crucial that you terminate X and Y with | if they are variables
#define DROP_WEAPON UNIT_WEAPON_VAR X Y
	# first, save the weapon to a the ground:
	{COPY_WEAPON armorymod.ground.{X}_{Y} {UNIT_WEAPON_VAR}}
	
	# If this is the first weapon on this tile, put the sack image:
	{IF_VAR armorymod.ground.{X}_{Y}.length equals 1 (
		[then]
			[item]
				x,y={X},{Y}
				image=items/leather-pack.png
				visible_in_fog=no
			[/item]
		[/then]
	)}
	
	# We also want to place images representing the weapon types on this tile.
	# Loop through all the weapon types that this weapon is 
	# (usually just one, but there are exceptions)
	[set_variables]
		name=armorymod.temp_types
		mode=replace
		[split]
			list=${UNIT_WEAPON_VAR}.specials.armorymod_type.id|
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	[for]
		array=armorymod.temp_types
		variable=armorymod.temp_iter
		[do]
			[if]
				[variable]
					name=armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|.count
					greater_than_equal_to=1
				[/variable]
				[then]
					# if this isn't the first item of this type on this tile, just increase the counter:
					{VARIABLE_OP armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|.count add 1}
				[/then]
				[else]
					# otherwise, start the counter and place the image:
					{VARIABLE armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|.count 1}
					[item]
						x,y={X},{Y}
						visible_in_fog=no
						image=$armorymod_ref.images.$armorymod.temp_types[$armorymod.temp_iter|].type||
					[/item]
				[/else]
			[/if]
		[/do]
	[/for]
	# once that's done, just clear the temporary variables
	{CLEAR_VARIABLE armorymod.temp_iter}
	{CLEAR_VARIABLE armorymod.temp_types}
	# and the original weapon variable (that weapon is on the ground now, after all)
	{CLEAR_VARIABLE {UNIT_WEAPON_VAR}}
#enddef


# Moves the {WEAPON_GROUND_INDEX}th item at X Y to the specified array 
# example:
# {PICKUP_WEAPON 4 unit{DOT}weapons $x1| $y1|}
# NOTE: it is crucial that you terminate X and Y with | if they are variables
#define PICKUP_WEAPON WEAPON_GROUND_INDEX UNIT_WEAPON_ARRAY X Y
	# first, just copy the weapon to its new owner:
	{COPY_WEAPON {UNIT_WEAPON_ARRAY} armorymod.ground.{X}_{Y}[{WEAPON_GROUND_INDEX}]}
	
	# then, similar to above, loop through the weapon's weapon types
	[set_variables]
		name=armorymod.temp_types
		mode=replace
		[split]
			list=$armorymod.ground.{X}_{Y}[{WEAPON_GROUND_INDEX}].specials.armorymod_type.id|
			key=type
			separator=,
			remove_empty=yes
		[/split]
	[/set_variables]
	[for]
		array=armorymod.temp_types
		variable=armorymod.temp_iter
		[do]
			[if]
				[variable]
					name=armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|.count
					greater_than=1
				[/variable]
				[then]
					# if there are multiple weapons of this type on the ground, don't remove the image, just decrease the counter:
					{VARIABLE_OP armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|.count sub 1}
				[/then]
				[else]
					# otherwise, well...
					{CLEAR_VARIABLE armorymod.ground.{X}_{Y}_types.$armorymod.temp_types[$armorymod.temp_iter|].type|}
					[remove_item]
						x,y={X},{Y}
						image=$armorymod_ref.images.$armorymod.temp_types[$armorymod.temp_iter|].type||
					[/remove_item]
				[/else]
			[/if]
		[/do]
	[/for]
	
	# and if this is the last weapon, remove the sack image as well
	{IF_VAR armorymod.ground.{X}_{Y}.length equals 1 (
		[then]
			[remove_item]
				x,y={X},{Y}
				image=items/leather-pack.png
			[/remove_item]
		[/then]
	)}
	
	# once that's done, just clear up
	{CLEAR_VARIABLE armorymod.temp_iter}
	{CLEAR_VARIABLE armorymod.temp_types}
	{CLEAR_VARIABLE armorymod.ground.{X}_{Y}[{WEAPON_GROUND_INDEX}]}
#enddef




	
	
# a macro to help parse weapon specials, used only in the following macro
#define CHECK_FOR_SPECIAL SPECIALS_VAR CONTAINER_NAME NAME
	{IF_VAR {SPECIALS_VAR}.{CONTAINER_NAME}.id equals {NAME} (
		[then]
			{VARIABLE armorymod.display_specials_list[$armorymod.display_specials_list.length].name {NAME}}
		[/then]
	)}
#enddef



# for displaying weapons to the player:
#define DISPLAY_WEAPON SIDE WEAPON_VAR OPTIONS
	# first comes the sticky task of making a list of the attack's specials.
	# is there a better way to do this?
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials chance_to_hit magical}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials slow slow}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials chance_to_hit marksman}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials dummy daze}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials damage charge}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials plague plague}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials swarm swarm}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials poison poison}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials drains drains}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials firststrike firststrike}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials berserk berserk}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials damage backstab}
	[set_variable]
		name=armorymod.display_specials
		[join]
			variable=armorymod.display_specials_list
			key=name
			separator=", "
		[/join]
	[/set_variable]
	{IF_VAR armorymod.display_specials_list.length greater_than 0 (
		[then]
			{VARIABLE armorymod.display_specials "
Special: <b>$armorymod.display_specials|</b>"}
		[/then]
	)}
	
	# Thank heavens that's done. Next, make a note if the attack isn't a weapon:
	[switch]
		variable={WEAPON_VAR}.name
		[case]
			value=$armorymod_ref.full_weapon_list|
		[/case]
		[else]
			{VARIABLE armorymod.weapon_note (_"

Note: this weapon can only be used by this unit; it cannot be dropped, destroyed, or captured.")}
		[/else]
	[/switch]
	
	# finally, pile all that information into a big messy message:
	[message]
		speaker=narrator
		side_for={SIDE}
		image=${WEAPON_VAR}.icon|~XBRZ(3)
		caption=${WEAPON_VAR}.description|
		message=_"Damage: <b>${WEAPON_VAR}.damage| x ${WEAPON_VAR}.number|</b>
Range: <b>${WEAPON_VAR}.range|</b>
Damage type: <b>${WEAPON_VAR}.type|</b>$armorymod.display_specials|$armorymod.weapon_note|"
		{OPTIONS}
	[/message]
	
	# and clean up.
	{CLEAR_VARIABLE armorymod.display_specials,armorymod.display_specials_list,armorymod.weapon_note}
#enddef












