# A very important event:
# Given a primary unit, rebuilds it's attack options based on the weapons currently stored as variables in it
# some attacks are inherent to the unit type (wolf's fangs) that it will have no matter what;
# others (spearman's spear) will disappear if they are not in the variables.
# therefore it is very important to only call this event if update_unit_vars has been called appropriately recently.

#define WORKSPACE
armorymod.rebuild_unit.#enddef

[event]
	name=armory_rebuild_unit
	id=armory_rebuild_unit
	first_time_only=no
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		variable={WORKSPACE}unit
	[/store_unit]
	
	#first thing first, clear out all the weapons (attacks other than wolf's fangs, etc)
	[for]
		array={WORKSPACE}unit.attack
		reverse=yes
		variable={WORKSPACE}iter
		[do]
			[switch]
				variable={WORKSPACE}unit.attack[${WORKSPACE}iter].name
				[case]
					value={ALL_WEAPON_NAMES}
					{CLEAR_VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter]}
				[/case]
				[else]
					# even if it is a non-weapon attack, it may be a fist attack that was added when the unit lost all its weapons;
					# if this is the case, we will remove it. It will be re-added if the unit still has no other attack.
					{IF_VAR {WORKSPACE}unit.attack[${WORKSPACE}iter].specials.armorymod_type.id equals unarmed (
						[then]
							{CLEAR_VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter]}
						[/then]
					)}
				[/else]
			[/switch]
		[/do]
	[/for]
	
	# next, add back in all weapons found in the unit's variables
	# since there's a decent amount of logic involved in turning the weapons and skills into the appropriate attack,
	# it is kept in a separate file:
	{~add-ons/ArmoryMod/utils/weapon_to_attack.cfg}
	
	# if at this point the unit still has no attacks (meaning it has no natural attacks (wolf fangs) and no weapons)
	# it gets a weak fist attack:
	{IF_VAR {WORKSPACE}unit.attack.length equals 0 (
		[then]
			# it is possible the unit_type has no attacks; only proceed if that's not the case
			[store_unit_type]
				type=${WORKSPACE}unit.type
				variable={WORKSPACE}unit_type
			[/store_unit_type]
			{IF_VAR {WORKSPACE}unit_type.attack.length greater_than 0 (
				[then]
					# normally, they get a simple 3-2 attack.
					{VARIABLE {WORKSPACE}unit.attack.name fist}
					{VARIABLE {WORKSPACE}unit.attack.description (_"fist")}
					{VARIABLE {WORKSPACE}unit.attack.type impact}
					{VARIABLE {WORKSPACE}unit.attack.range melee}
					{VARIABLE {WORKSPACE}unit.attack.damage 3}
					{VARIABLE {WORKSPACE}unit.attack.number 2}
					# Damage is modified by trait damage (strong/weak):
					{APPLY_TRAIT_DAMAGE {WORKSPACE}unit.attack {WORKSPACE}unit.modifications.trait}
					# the icon depends on the unit's race
					[switch]
						variable={WORKSPACE}unit.race
						[case]
							value=undead
							{VARIABLE {WORKSPACE}unit.attack.icon attacks/fist-skeletal.png}
						[/case]
						[case]
							value=troll
							{VARIABLE {WORKSPACE}unit.attack.icon attacks/fist-troll.png}
						[/case]
						[case]
							value=human,elf,dwarf,khalifate,orc,goblin,ogre
							{VARIABLE {WORKSPACE}unit.attack.icon attacks/fist-human.png}
						[/case]
						[case]
							# should we be dealing with a drake, overwrite some of the previous values; 
							# his default attack is claws, not fist.
							value=drake
							{VARIABLE {WORKSPACE}unit.attack.icon attacks/claws-drake.png}
							{VARIABLE {WORKSPACE}unit.attack.type blade}
							{VARIABLE {WORKSPACE}unit.attack.name claws}
							{VARIABLE {WORKSPACE}unit.attack.description (_"claws")}
						[/case]
						[else]
							{VARIABLE {WORKSPACE}unit.attack.icon attacks/fist.png}
						[/else]
					[/switch]
					# finally, use an invisible weapon special to mark that this is a default attack that should disappear as soon as this unit gets any weapon:
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_type.id unarmed}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_type.name_inactive ""}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_type.name ""}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_type.filter_self.type this_type_does_not_exist_or_someone_is_loony}
					# and one to mark that our crappy animation should apply:
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_animate.id armorymod_animate}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_animate.name_inactive ""}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_animate.name ""}
					{VARIABLE {WORKSPACE}unit.attack.specials.armorymod_animate.filter_self.type this_type_does_not_exist_or_someone_is_loony}
				[/then]
			)}
		[/then]
	)}
	
	# Finally, time to clean up. Just sort the weapons so melee ones appear first, then unstore the unit.
	[for]
		array={WORKSPACE}unit.attack
		variable={WORKSPACE}iter
		reverse=yes
		[do]
			{IF_VAR {WORKSPACE}unit.attack[${WORKSPACE}iter|].range equals melee (
				[then]
					{COPY_WEAPON {WORKSPACE}temp_attacks {WORKSPACE}unit.attack[${WORKSPACE}iter|]}
					{CLEAR_VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter|]}
				[/then]
			)}
		[/do]
	[/for]
	[set_variables]
		name={WORKSPACE}unit.attack
		mode=insert
		to_variable={WORKSPACE}temp_attacks
	[/set_variables]
	[unstore_unit]
		advance=no
		variable={WORKSPACE}unit
	[/unstore_unit]
	{CLEAR_VARIABLE armorymod.rebuild_unit}
[/event]

#undef WORKSPACE