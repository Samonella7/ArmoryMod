# This file is included directly into an event, so it is just action wml without need for extra events.
# for context, see rebuild_unit.cfg

#define UNIT_ATTACKS
armorymod.rebuild_unit.unit.attack#enddef

#define UNIT_VARS
armorymod.rebuild_unit.unit.variables.armorymod.#enddef

# name is different from usual to avoid conflict with rebuild_unit.cfg's workspace:
#define WORKROOM
armorymod.weapon_to_attack.#enddef

#define MAIN_ITER
armorymod.weapon_to_attack_iter#enddef


# Everything done here must be done for each weapon, so iterate through them:
[for]
	array={UNIT_VARS}weapons
	variable={MAIN_ITER}
	[do]
		# The first task is to look through the skills.
		# if any match this weapon's weapon type, make a copy of the skill we can work with.
				
		# we'll put all matching skills in {WORKROOM}temp_skills
		{VARIABLE {WORKROOM}temp_continue no}
		[for]
			array={UNIT_VARS}skills
			variable={WORKROOM}iter_2
			[do]
				# however, before we check the weapon type, see if the two attacks are a perfect match.
				# if it is, than that is the skill we should use, even if a different shares the weapon type but has better stats
				# (example: a dark adept's shadow wave would otherwise average its damage with the chill wave, effectively boosting its base damage)
				[if]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].name
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].name
					[/variable]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].icon
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].icon
					[/variable]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].type
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].type
					[/variable]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].range
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].range
					[/variable]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].damage
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].damage
					[/variable]
					[variable]
						name={UNIT_VARS}skills[${WORKROOM}iter_2|].number
						equals=${UNIT_VARS}weapons[${MAIN_ITER}|].number
					[/variable]
					[then]
						# As said, this is the one and only skill we should consider when making the final attack:
						{CLEAR_VARIABLE {WORKROOM}temp_skills}
						{COPY_WEAPON {WORKROOM}temp_skills {UNIT_VARS}skills[${WORKROOM}iter_2|]}
						# since this is a default attack, we will eventually need to mark the attack so that
						# our crappy animations aren't used instead of the default ones.
						# this boolean will remind us:
						{VARIABLE {WORKROOM}is_default_attack yes}
						[break]
						[/break]
					[/then]
				[/if]
				
				# if the skill was not a perfect match, then we just check whether it matches the weapon type(s)
				# which... since there might be more than one in both the skill and the weapon, is actually a pain in the butt:
				[set_variables]
					name={WORKROOM}temp_types
					mode=replace
					[split]
						key=type
						separator=,
						remove_empty=yes
						list=${UNIT_VARS}skills[${WORKROOM}iter_2|].specials.armorymod_type.id|
					[/split]
				[/set_variables]
				[for]
					array={WORKROOM}temp_types
					variable={WORKROOM}iter_3
					[do]
						[if]
							[variable]
								name={UNIT_VARS}weapons[${MAIN_ITER}|].specials.armorymod_type.id
								contains=${WORKROOM}temp_types[${WORKROOM}iter_3|].type|
							[/variable]
							[then]
								# if it matches, prepend this skill to the temp_skills list
								{COPY_WEAPON {WORKROOM}temp_skills {UNIT_VARS}skills[${WORKROOM}iter_2|]}
							[/then]
						[/if]
					[/do]
				[/for]
			[/do]
		[/for]
		
		# now all relevant skills are in {WORKROOM}temp_skills
		
		# there may be none, however, say if you were giving a bow to a Pikeman
		{IF_VAR {WORKROOM}temp_skills.length equals 0 (
			[then]
				# if that's the case, the unit must work with a simple 0,0 skill instead,
				# so the final attack will be significantly weaker.
				{VARIABLE {WORKROOM}temp_skills.damage 0}
				{VARIABLE {WORKROOM}temp_skills.number 0}
			[/then]
			[else]
				# otherwise, it is possible that there are multiple skills left, like
				# a dark adept picking up a saurian augur's curse.
				# in this case, choose the strongest skill, and remove all but it.
				# 	(this code is safe in case of there already being only 1 remaining skill)
				{VARIABLE armorymod.weapon_search_array {WORKROOM}temp_skills}
				[fire_event]
					# this event is defined in tools.cfg
					name=armory_find_strongest_weapon
				[/fire_event]
				# it leaves the index of the best weapon in armorymod.best_weapon_index,
				# so clear all but that index:
				[for]
					array={WORKROOM}temp_skills
					variable={WORKROOM}iter_2
					reverse=yes
					[do]
						{IF_VAR {WORKROOM}iter_2 not_equals $armorymod.best_weapon_index (
							[then]
								{CLEAR_VARIABLE {WORKROOM}temp_skills[${WORKROOM}iter_2|]}
							[/then]
						)}
					[/do]
				[/for]
			[/else]
		)}
		
		# NOW!!!
		# we have one skill saved in {WORKROOM}temp_skills
		# we have the one weapon we're trying to apply to this unit.
		# We are ready to actually give the unit an attack! 
		
		# ...
		
		# Though that isn't quite as easy as it sounds.
		
		# We determine the final number by averaging the attack with the skill
		{VARIABLE {WORKROOM}final_number ${UNIT_VARS}weapons[${MAIN_ITER}|].number}
		{VARIABLE_OP {WORKROOM}final_number add ${WORKROOM}temp_skills.number|}
		{VARIABLE_OP {WORKROOM}final_number divide 2}
		# round towards the weapon:
		{IF_VAR {UNIT_VARS}weapons[${MAIN_ITER}|].number greater_than ${WORKROOM}temp_skills.number| (
			[then]
				{VARIABLE_OP {WORKROOM}final_number round ceil}
			[/then]
			[else]
				{VARIABLE_OP {WORKROOM}final_number round floor}
			[/else]
		)}
		
		# The total damage is a weighted average. The weapon is usually more important than the skill
		{VARIABLE {WORKROOM}temp_weight 1.6}
		{IF_VAR {UNIT_VARS}weapons[${MAIN_ITER}|].specials.armorymod_type.id contains magic (
			[then]
				# but if it's a magic attack, the skill has slightly more importance
				{VARIABLE {WORKROOM}temp_weight 0.8}
			[/then]
		)}
		{IF_VAR {UNIT_VARS}weapons[${MAIN_ITER}|].specials.armorymod_type.id contains sheilds (
			[then]
				# And if it's a shield, the weapon is much more important
				{VARIABLE {WORKROOM}temp_weight 2.2}
			[/then]
		)}
		{VARIABLE {WORKROOM}total_damage ${UNIT_VARS}weapons[${MAIN_ITER}|].damage}
		{VARIABLE_OP {WORKROOM}total_damage multiply ${UNIT_VARS}weapons[${MAIN_ITER}|].number}
		{VARIABLE_OP {WORKROOM}total_damage multiply ${WORKROOM}temp_weight|}
		{VARIABLE_OP {WORKROOM}temp_skills.damage multiply ${WORKROOM}temp_skills.number|}
		{VARIABLE_OP {WORKROOM}total_damage add ${WORKROOM}temp_skills.damage|}
		{VARIABLE_OP {WORKROOM}temp_weight add 1}
		{VARIABLE_OP {WORKROOM}total_damage divide ${WORKROOM}temp_weight|}
		
		# and of course the damage per strike is based off our calculations for total damage and number of strikes
		{VARIABLE {WORKROOM}final_damage ${WORKROOM}total_damage|}
		{VARIABLE_OP {WORKROOM}final_damage divide ${WORKROOM}final_number|}
		{VARIABLE_OP {WORKROOM}final_damage round floor}
		
		
		# now that the final damage and number have been worked out, make the attack! 
		# it includes weapon specials from both the skill and the weapon
		
		{COPY_WEAPON {UNIT_ATTACKS} {UNIT_VARS}weapons[${MAIN_ITER}|]}
		# unfortunately, the only way to merge the specials that i know of is to merge each possible type.
		# fortunately, there are not many specials that are attached to the skill, most are attached to the weapon
		[set_variables]
			name={UNIT_ATTACKS}[0].specials.chance_to_hit
			mode=insert
			to_variable={WORKROOM}temp_skills.specials.chance_to_hit
		[/set_variables]
		[set_variables]
			name={UNIT_ATTACKS}[0].specials.damage
			mode=insert
			to_variable={WORKROOM}temp_skills.specials.damage
		[/set_variables]
		[set_variables]
			name={UNIT_ATTACKS}[0].specials.berserk
			mode=insert
			to_variable={WORKROOM}temp_skills.specials.berserk
		[/set_variables]
		# what about the specials used by armorymod? Well, we already got armorymod_type from the weapon.
		# the other, armorymod_animate, comes with neither, and we will added it now:
		{IF_VAR {WORKROOM}is_default_attack not_equals yes (
			[then]
				# but don't add it if earlier on we discovered that this is a default attack,
				# and therefore should not use our crappy animations
				{VARIABLE {UNIT_ATTACKS}[0].specials.armorymod_animate.id armorymod_animate}
				{VARIABLE {UNIT_ATTACKS}[0].specials.armorymod_animate.name_inactive ""}
				{VARIABLE {UNIT_ATTACKS}[0].specials.armorymod_animate.name ""}
				{VARIABLE {UNIT_ATTACKS}[0].specials.armorymod_animate.filter_self.type this_type_does_not_exist_or_someone_is_loony}
			[/then]
		)}
		
		# now that the weapon is copied, just set the damage and number:
		{VARIABLE {UNIT_ATTACKS}[0].damage ${WORKROOM}final_damage|}
		{VARIABLE {UNIT_ATTACKS}[0].number ${WORKROOM}final_number|}
		# apply trait damage (strong, dextrous, weak):
		{APPLY_TRAIT_DAMAGE {UNIT_ATTACKS}[0] armorymod.rebuild_unit.unit.modifications.trait}
		
		# just for fun, if the unit happens to have 8 or more max_moves (not counting the quick trait)...
		[store_unit_type]
			type=$armorymod.rebuild_unit.type
			variable={WORKROOM}temp_rebuild_type
		[/store_unit_type]
		{IF_VAR {WORKROOM}temp_rebuild_type.movement greater_than 7 (
			[then]
				# and if the weapon happens to be a lance...
				{IF_VAR {UNIT_ATTACKS}[0].name equals lance (
					[then]
						# and if the attack doesn't already have charge...
						{VARIABLE {WORKROOM}temp_has_charge no}
						[for]
							array={UNIT_ATTACKS}[0].specials.damage
							variable={WORKROOM}iter_2
							[do]
								{IF_VAR {UNIT_ATTACKS}[0].specials.damage[${WORKROOM}iter_2|].id equals charge (
									[then]
										{VARIABLE {WORKROOM}temp_has_charge yes}
									[/then]
								)}
							[/do]
						[/for]
						{IF_VAR {WORKROOM}temp_has_charge equals no (
							[then]
								# then you get it!
								{VARIABLE armorymod.charge_index ${UNIT_ATTACKS}[0].specials.damage.length|}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].id charge}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].name (_"charge")}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].apply_to both}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].multiply 2}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].active_on offense}
								{VARIABLE {UNIT_ATTACKS}[0].specials.damage[$armorymod.charge_index|].description (_"When used offensively, this attack deals double damage to the target. It also causes this unit to take double damage from the target’s counterattack.")}
								{CLEAR_VARIABLE armorymod.charge_index}
							[/then]
						)}
					[/then]
				)}
			[/then]
		)}
		
		# AND IT IS FINISHED
		
		{CLEAR_VARIABLE armorymod.weapon_to_attack}
		{CLEAR_VARIABLE armorymod.weapon_search_array}
		{CLEAR_VARIABLE armorymod.best_weapon_index}
	[/do]
[/for]

{CLEAR_VARIABLE {MAIN_ITER}}

# recalling that this whole file is directy included into an event,
# there's not need to unstore the unit, the other event takes care of that.


#undef WORKROOM
#undef UNIT_ATTACKS
#undef UNIT_VARS
#undef MAIN_ITER







