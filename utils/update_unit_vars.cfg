# A very important event:
# Given a primary unit, refreshes it's weapons variables
# in other words, makes sure that we have an up-to-date list of its weapons

#define WORKSPACE 
armorymod.update_unit_vars.#enddef

[event]
	name=armory_update_unit_vars
	id=armory_update_unit_vars
	first_time_only=no
	[store_unit]
		[filter]
			x,y=$x1|,$y1|
		[/filter]
		variable={WORKSPACE}unit
	[/store_unit]
	
	# if this is our fist time dealing with this particular unit (ie, if none of our variables have been set)
	# we have some basic set-up to do:
	{IF_VAR {WORKSPACE}unit{DOT}can_use_weapons equals $this_variable_is_empty_or_someone_is_loony| (
		[then]
			# many units (wild wolves, bats, etc.) cannot use weapons. 
			# Such units are characterized by not having any weapons to begin with (attacks are claws, bite, etc.)
			# therefore, we will set this to no for now:
			{VARIABLE {WORKSPACE}unit{DOT}can_use_weapons no}
			# and if any proper weapon is found later on, it will be updated to yes.
			# also, there are a few exceptions (units with no weapons, but are allowed to pick them up):
			[switch]
				variable={WORKSPACE}unit.type
				[case]
					value={UNIT_EXCEPTIONS}
					{VARIABLE {WORKSPACE}unit{DOT}can_use_weapons yes}
				[/case]
			[/switch]
		[/then]
	)}
	
	# next, check through all its attacks to identify drop-able weapons.
	# as stated, if any are found we will verify can_use_weapons is yes.
	# additionally, we will keep a record of all weapons in {WORKSPACE}unit{DOT}weapons
	[for]
		array={WORKSPACE}unit.attack
		variable={WORKSPACE}iter_1
		[do]
			
			# To tell whether this attack has already been cataloged, check whether it's armorymod_type special has been set:
			{IF_VAR {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.id not_equals $this_variable_is_empty_or_someone_is_loony| (
				[then]
					# if it has, there's no need to mess with it any more:
					[continue]
					[/continue]
				[/then]
			)}
			
			# otherwise, add the special for later reference:
			#{VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.id armorymod_checked}
			# GET BACK TO THAT ^
			{VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.name_inactive ""}
			{VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.name ""}
			{VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.filter_self.type this_type_does_not_exist_or_someone_is_loony}
			# one thing is still missing: the id field should state the weapon type, or state that it's a nonweapon or an unarmed attack
			# unarmed attack is ruled out, i create those myself in a different part of the code, and they will always be created with this special already set
			# but we still don't know whether it's a weapon or not. We will shortly.
			
			# Now, if it is a recognized weapon type, catalog it.
			[switch]
				variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].name
				[else]
					# first, if the attack is not a valid weapon type:
					# the only thing to do is finish the special started above
					{VARIABLE {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.id nonweapon}
				[/else]
				[case]
					value={ALL_WEAPON_NAMES}
					# If, however, a valid weapon was found, verify that can_use_weapons=yes:
					{VARIABLE {WORKSPACE}unit{DOT}can_use_weapons yes}
					
					# and, to finish the special created above, we must determine the weapon type(s). Here we go:
					[for]
						array=armorymod_ref.${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].range|
						variable={WORKSPACE}iter_2
						[do]
							[switch]
								variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].name
								[case]
									value=$armorymod_ref.${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].range|[${WORKSPACE}iter_2|].names|
									[set_variable]
										name={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.id
										value=${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type.id|,$armorymod_ref.${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].range|[${WORKSPACE}iter_2|].type|
									[/set_variable]
								[/case]
							[/switch]
						[/do]
					[/for]
					
					# Then copy the weapon to our variables:
					{COPY_WEAPON {WORKSPACE}unit{DOT}weapons {WORKSPACE}unit.attack[${WORKSPACE}iter_1|]}
					# this particular unit's traits should not be included, however.
					{REMOVE_TRAIT_DAMAGE {WORKSPACE}unit{DOT}weapons[0] {WORKSPACE}unit.modifications.trait}
					# and some specials belong purely to the skill and should not be copied to the weapon:
					{CLEAR_VARIABLE {WORKSPACE}unit{DOT}weapons[0].specials.berserk}
					{CLEAR_VARIABLE {WORKSPACE}unit{DOT}weapons[0].specials.damage}
					[for]
						array={WORKSPACE}unit{DOT}weapons[0].specials.chance_to_hit
						variable={WORKSPACE}iter_2
						reverse=yes
						[do]
							{IF_VAR {WORKSPACE}unit{DOT}weapons[0].specials.chance_to_hit[${WORKSPACE}iter_2].id equals marksman (
								[then]
									{CLEAR_VARIABLE {WORKSPACE}unit{DOT}weapons[0].specials.chance_to_hit[${WORKSPACE}iter_2]}
								[/then]
							)}
						[/do]
					[/for]
					
					# additionally, if the unit had this weapon before anyone else (which it did, or the weapon would have been marked by our invisible special)
					# that means this weapon is part of this unit's unit_type (or it was awarded by a campaign event, which we will treat the same way).
					# Since that's the case, this attack should become a skill as well as a weapon.
					# instead of using a macro to copy the whole thing, the skills variables are light-weight and only include specific values
					{VARIABLE {WORKSPACE}index ${WORKSPACE}unit{DOT}skills.length|}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].damage ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].damage}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].number ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].number}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].range ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].range}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].type ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].type}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].icon ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].icon}
					{VARIABLE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].name ${WORKSPACE}unit.attack[${WORKSPACE}iter_1|].name}
					{REMOVE_TRAIT_DAMAGE {WORKSPACE}unit{DOT}skills[${WORKSPACE}index|] {WORKSPACE}unit.modifications.trait}
					# also copy four specific weapon specials (the same four we did not copy to the weapon)
					[set_variables]
						name={WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].specials.damage
						mode=insert
						to_variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.damage
					[/set_variables]
					[set_variables]
						name={WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].specials.berserk
						mode=insert
						to_variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.berserk
					[/set_variables]
					[for]
						array={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.chance_to_hit
						variable={WORKSPACE}iter_2
						[do]
							{IF_VAR {WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.chance_to_hit[${WORKSPACE}iter_2].id not_equals magical (
								[then]
									[set_variables]
										name={WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].specials.chance_to_hit
										mode=insert
										to_variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.chance_to_hit[${WORKSPACE}iter_2]
									[/set_variables]
								[/then]
							)}
						[/do]
					[/for]
					# finally, also copy the custom weapon special that names the weapon type
					[set_variables]
						name={WORKSPACE}unit{DOT}skills[${WORKSPACE}index|].specials.armorymod_type
						mode=insert
						to_variable={WORKSPACE}unit.attack[${WORKSPACE}iter_1|].specials.armorymod_type
					[/set_variables]
				[/case]
			[/switch]
		[/do]
	[/for]
	
	# the loop is over; we have examined each attack and cataloged all relevant weapons.
	# therefore, the unit's variables are up-to-date, and this event can clean up and return.
	[unstore_unit]
		advance=no
		variable={WORKSPACE}unit
	[/unstore_unit]
	{CLEAR_VARIABLE armorymod.update_unit_vars}
[/event]

#undef WORKSPACE