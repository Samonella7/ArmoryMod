# this file defines all ways for the menu to be opened.
# there are 3 ways:
# 1) if a human player uses the right-click option/hotkey
# 2) if a unit having weapons is killed, the killer can use the menu to access spoils
# 3) if a unit advances, the player may examine it's weapons, old and new, to decide what to keep

# this file also deals with clearing $armorymod| when a scenario ends,
# and what happens if any ai side is presented with scenarios 2&3 for opening the menu
# (the ai unit grabs up all weapons it can and drops any it can't to the ground)

###############################################
## NUMBER ONE: human opens the menu
###############################################
[event]
	name=prestart
	[set_menu_item]
		id=armorymod_menu
		description=_"Armory menu"
		[show_if]
			[have_unit]
				x,y=$x1,$y1
				[filter_vision]
					side=$side_number|
					visible=yes
				[/filter_vision]
			[/have_unit]
			[or]
				[variable]
					name=armorymod.ground.$x1|_$y1|.length
					greater_than=0
				[/variable]
				[have_location]
					x,y=$x1|,$y1|
					[filter_vision]
						side=$side_number|
						visible=yes
					[/filter_vision]
				[/have_location]
			[/or]
		[/show_if]
		[default_hotkey]
			key=e
			alt=yes
		[/default_hotkey]
		[command]
			{VARIABLE armorymod.loc.x $x1}
			{VARIABLE armorymod.loc.y $y1}
			{VARIABLE armorymod.side_for $side_number|}
			[fire_event]
				name=open_armory_menu
			[/fire_event]
			{CLEAR_VARIABLE armorymod.loc}
			{CLEAR_VARIABLE armorymod.side_for}
		[/command]
	[/set_menu_item]
[/event]


###############################################
## NUMBER TWO: unit death opens the menu
###############################################
# We want this to happen before campaigns' last breath events, so we use attack end instead:
[event]
	name=attack end
	id=armorymod_attacker_dies
	first_time_only=no
	[filter]
		formula="hitpoints <= 0"
	[/filter]
	[fire_event]
		name=armorymod_capture_weapons
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
		[secondary_unit]
			x,y=$x2,$y2
		[/secondary_unit]
	[/fire_event]
[/event]
[event]
	name=attack end
	id=armorymod_defender_dies
	first_time_only=no
	[filter_second]
		formula="hitpoints <= 0"
	[/filter_second]
	[fire_event]
		name=armorymod_capture_weapons
		[primary_unit]
			x,y=$x2,$y2
		[/primary_unit]
		[secondary_unit]
			x,y=$x1,$y1
		[/secondary_unit]
	[/fire_event]
[/event]
[event]
	name=armorymod_capture_weapons
	id=armorymod_capture_weapons
	first_time_only=no
	[fire_event]
		name=armory_update_unit_vars
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
	[fire_event]
		name=armory_update_unit_vars
		[primary_unit]
			x,y=$x2,$y2
		[/primary_unit]
	[/fire_event]
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		variable=armorymod.temp_unit
	[/store_unit]
	# only do stuff if the killed unit had weapons
	{IF_VAR armorymod.temp_unit{DOT}weapons.length greater_than 0 (
		[then]
			{IF_IS_HUMAN $second_unit.side| (
				[then]
					# if it's a human side, open the menu for him/her to decide what to do with spoils
					{VARIABLE armorymod.loc.x $x2}
					{VARIABLE armorymod.loc.y $y2}
					{VARIABLE armorymod.side_for $second_unit.side|}
					[for]
						array=armorymod.temp_unit{DOT}weapons
						variable=armorymod.capture_iter
						[do]
							{COPY_WEAPON armorymod.other_weapons.weapons armorymod.temp_unit{DOT}weapons[$armorymod.capture_iter|]}
						[/do]
					[/for]
					{VARIABLE armorymod.other_weapons.title (_"Spoils")}
					[fire_event]
						name=open_armory_menu
					[/fire_event]
					#TODO the following seems to not work?
					[for]
						array=armorymod.other_weapons.weapons
						variable=armorymod.capture_iter
						reverse=yes
						[do]
							{DROP_WEAPON armorymod.other_weapons.weapons[$armorymod.capture_iter|] $x2| $y2|}
						[/do]
					[/for]
					{CLEAR_VARIABLE armorymod.other_weapons}
					{CLEAR_VARIABLE armorymod.capture_iter}
					{CLEAR_VARIABLE armorymod.loc}
					{CLEAR_VARIABLE armorymod.side_for}
				[/then]
				[else]
					# otherwise, the ai takes what it can, drops what it can't.
					[store_unit]
						[filter]
							x,y=$x2,$y2
						[/filter]
						variable=armorymod.capture_unit
					[/store_unit]
					[for]
						array=armorymod.temp_unit{DOT}weapons
						reverse=yes
						variable=armorymod.capture_iter
						[do]
							{IF_VAR armorymod.capture_unit{DOT}can_use_weapons equals yes (
								[then]
									{COPY_WEAPON armorymod.capture_unit{DOT}weapons armorymod.temp_unit{DOT}weapons[$armorymod.capture_iter|]}
									{CLEAR_VARIABLE armorymod.temp_unit{DOT}weapons[$armorymod.capture_iter|]}
								[/then]
								[else]
									{DROP_WEAPON armorymod.temp_unit{DOT}weapons[$armorymod.capture_iter|] $x2| $y2|}
								[/else]
							)}
						[/do]
					[/for]
					[unstore_unit]
						advance=no
						variable=armorymod.capture_unit
					[/unstore_unit]
					[fire_event]
						name=armory_rebuild_unit
						[primary_unit]
							x,y=$x2,$y2
						[/primary_unit]
					[/fire_event]
					{CLEAR_VARIABLE armorymod.capture_unit}
					{CLEAR_VARIABLE armorymod.capture_iter}
				[/else]
			)}
		[/then]
	)}
	{CLEAR_VARIABLE armorymod.temp_unit}
[/event]

###############################################
## NUMBER THREE: unit advancement opens the menu
###############################################
[event]
	name=advance
	id=armory_advance
	first_time_only=no
	# only do stuff if the victorious unit had weapons
	[fire_event]
		name=armory_update_unit_vars
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		variable=armorymod.advance_unit
	[/store_unit]
	{IF_VAR armorymod.advance_unit{DOT}weapons.length greater_than 0 (
		[then]
			# before the advance, we store away all the weapons in other_weapons, so
			# after the advance the player can decide which to keep
			[for]
				array=armorymod.advance_unit{DOT}weapons
				reverse=yes
				variable=armorymod.advance_iter
				[do]
					{COPY_WEAPON armorymod.other_weapons.weapons armorymod.advance_unit{DOT}weapons[$armorymod.advance_iter|]}
					{CLEAR_VARIABLE armorymod.advance_unit{DOT}weapons[$armorymod.advance_iter|]}
				[/do]
			[/for]
			[unstore_unit]
				advance=no
				variable=armorymod.advance_unit
			[/unstore_unit]
			[fire_event]
				name=armory_rebuild_unit
				[primary_unit]
					x,y=$x1,$y1
				[/primary_unit]
			[/fire_event]
		[/then]
	)}
	{CLEAR_VARIABLE armorymod.advance_iter}
	{CLEAR_VARIABLE armorymod.advance_unit}
[/event]

[event]
	name=post advance
	id=armory_post_advance
	first_time_only=no
	# here we pick up where the previous event left off. First thing is to update the skills.
	# this is explained in the event, defined in tools.cfg
	[fire_event]
		name=armory_advance_skills
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
	# once that's over, we give back an weapons the unit had before advancing:
	{IF_VAR armorymod.other_weapons.weapons.length greater_than 0 (
		[then]
			{IF_IS_HUMAN $unit.side| (
				[then]
					# if it's a human side, open the menu so the player can choose what to take/drop/destroy:
					{VARIABLE armorymod.side_for $unit.side|}
					{VARIABLE armorymod.loc.x $x1}
					{VARIABLE armorymod.loc.y $y1}
					{VARIABLE armorymod.other_weapons.title (_"Pre-advance weapons")}
					[fire_event]
						name=open_armory_menu
					[/fire_event]
					[for]
						array=armorymod.other_weapons.weapons
						variable=armorymod.advance_iter
						reverse=yes
						[do]
							{DROP_WEAPON armorymod.other_weapons.weapons[$armorymod.advance_iter|] $x1| $y1|}
						[/do]
					[/for]
					{CLEAR_VARIABLE armorymod.other_weapons}
					{CLEAR_VARIABLE armorymod.advance_iter}
					{CLEAR_VARIABLE armorymod.loc}
					{CLEAR_VARIABLE armorymod.side_for}
				[/then]
				[else]
					# if it's not a human player, the ai takes what it can, drops what it can't
					[fire_event]
						name=armory_update_unit_vars
						[primary_unit]
							x,y=$x1,$y1
						[/primary_unit]
					[/fire_event]
					[store_unit]
						[filter]
							x,y=$x1,$y1
						[/filter]
						variable=armorymod.advance_unit
					[/store_unit]
					[for]
						array=armorymod.other_weapons.weapons
						reverse=yes
						variable=armorymod.advance_iter
						[do]
							{IF_VAR armorymod.advance_unit{DOT}can_use_weapons equals yes (
								[then]
									{COPY_WEAPON armorymod.advance_unit{DOT}weapons armorymod.other_weapons.weapons[$armorymod.advance_iter|]}
									{CLEAR_VARIABLE armorymod.other_weapons.weapons[$armorymod.advance_iter|]}
								[/then]
								[else]
									{DROP_WEAPON armorymod.other_weapons.weapons[$armorymod.advance_iter|] $x1| $y1|}
								[/else]
							)}
						[/do]
					[/for]
					[unstore_unit]
						advance=no
						variable=armorymod.advance_unit
					[/unstore_unit]
					[fire_event]
						name=armory_rebuild_unit
						[primary_unit]
							x,y=$x1,$y1
						[/primary_unit]
					[/fire_event]
					{CLEAR_VARIABLE armorymod.advance_unit}
					{CLEAR_VARIABLE armorymod.advance_iter}
				[/else]
			)}
		[/then]
	)}
[/event]


###############################################
## OTHER STUFF
###############################################

[event]
	name=victory
	id=armorymod_clear_variables
	# items are not carried from scenario to scenario unless a unit is holding it
	{CLEAR_VARIABLE armorymod}
	{CLEAR_VARIABLE armorymod_ref}
[/event]

# also, sometimes animations get messed up if units don't have the right variables set up, so
# whenever units are first created we'll make sure they're up to speed:
[event]
	name=unit placed
	id=armorymod_prepare_unit
	first_time_only=no
	[fire_event]
		name=armory_update_unit_vars
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
	[fire_event]
		name=armory_rebuild_unit
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
[/event]

# new ais are unbearably slow when units start stacking up their attack counts.
# can't say why.
[event]
	name=preload
	id=armorymod_set_ais
	first_time_only=no
	[modify_side]
		switch_ai=ai/ais/ai_default_rca_1_14.cfg
	[/modify_side]
[/event]
