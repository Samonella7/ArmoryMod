# a macro to help parse weapon specials, used only in the following event
#define CHECK_FOR_SPECIAL SPECIALS_VAR CONTAINER_NAME NAME
	{IF_VAR {SPECIALS_VAR}.{CONTAINER_NAME}.id equals {NAME} (
		[then]
			{VARIABLE armorymod.display_specials_list[$armorymod.display_specials_list.length].name {NAME}}
		[/then]
	)}
#enddef

# for displaying individual weapons to the player:
#define DISPLAY_WEAPON SIDE WEAPON_VAR OPTIONS
	# first comes the sticky task of making a list of the attack's specials.
	# is there a better way to do this?
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials chance_to_hit magical}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials slow slow}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials chance_to_hit marksman}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials dummy daze}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials damage charge}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials plague plague}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials swarm swarm}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials poison poison}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials drains drains}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials firststrike firststrike}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials berserk berserk}
	{CHECK_FOR_SPECIAL {WEAPON_VAR}.specials damage backstab}
	[set_variable]
		name=armorymod.display_specials
		[join]
			variable=armorymod.display_specials_list
			key=name
			separator=", "
		[/join]
	[/set_variable]
	{IF_VAR armorymod.display_specials_list.length greater_than 0 (
		[then]
			{VARIABLE armorymod.display_specials "
Special: <b>$armorymod.display_specials|</b>"}
		[/then]
	)}
	
	# Thank heavens that's done. Next, make a note about the weapon type
	[switch]
		variable={WEAPON_VAR}.name

		[case]
			value=$armorymod_ref.full_weapon_list|
			{VARIABLE armorymod.weapon_type_note ""}
			[foreach]
				array=armorymod_ref.${WEAPON_VAR}.range|
				index_var=armorymod.display_weapon_i
				variable=armorymod.this_weapon
				[do]
					[switch]
						variable={WEAPON_VAR}.name
						[case]
							value=$armorymod.this_weapon.names|
							{IF_VAR armorymod.weapon_type_note equals "" (
								[then]
									{VARIABLE armorymod.weapon_type_note $armorymod.this_weapon.weapon_type|}
								[/then]
								[else]
									{VARIABLE armorymod.weapon_type_note "$armorymod.weapon_type_note|, $armorymod.this_weapon.weapon_type|"}
								[/else]
							)}
						[/case]
					[/switch]
				[/do]
			[/foreach]
			{VARIABLE armorymod.weapon_type_note (_"Weapon type: <b>$armorymod.weapon_type_note|</b>")}
		[/case]

		[else]
			{VARIABLE armorymod.weapon_type_note (_"
Note: this attack can only be used by this unit; it cannot be dropped, destroyed, or captured.")}
		[/else]
	[/switch]
	
	# finally, pile all that information into a big messy message:
	[message]
		speaker=narrator
		side_for={SIDE}
		image=${WEAPON_VAR}.icon|~XBRZ(3)
		caption=${WEAPON_VAR}.description|
		message=_"Damage: <b>${WEAPON_VAR}.damage| x ${WEAPON_VAR}.number|</b>
Range: <b>${WEAPON_VAR}.range|</b>
Damage type: <b>${WEAPON_VAR}.type|</b>$armorymod.display_specials|
$armorymod.weapon_type_note|"
		{OPTIONS}
	[/message]
	
	# and clean up.
	{CLEAR_VARIABLE armorymod.display_specials,armorymod.display_specials_list,armorymod.weapon_type_note,armorymod.display_weapon_i,armorymod.this_weapon}
#enddef


# Displays all the weapons listed in {WEAPON_VAR} to {SIDE}
# {ON_SELECT_OPTIONS} is wml [option]s to display when an item is selected
# will fire {SELECTED_EVENT_NAME} when appropriate, after setting armorymod.weapon_index set
#define DISPLAY_WEAPON_LIST SIDE WEAPON_VAR SELECTED_EVENT_NAME
	# if it happens there is only one item, don't waste time with the halfway menu, just display the one item
	{IF_VAR {WEAPON_VAR}.length equals 1 (
		[then]
			{VARIABLE armorymod.weapon_index 0}
			[fire_event]
				id={SELECTED_EVENT_NAME}
			[/fire_event]
		[/then]
		[else]
			# otherwise, we have a bit of work to do
			{VARIABLE armorymod.inner_menu_break no}
			{VARIABLE armorymod.inner_menu_index 0}
			[while]
				[variable]
					name=armorymod.inner_menu_break
					equals=no
				[/variable]
				[do]
					{CLEAR_VARIABLE armorymod.msg}
				
					# since we need one option per weapon, we can't just use a normal [message]
					# instead, build up the wml tag as a variable, then we'll use [insert_tag] to execute it
					{VARIABLE armorymod.msg.speaker narrator}
					{VARIABLE armorymod.msg.side_for {SIDE}}
					{VARIABLE armorymod.msg.image {LOGO_LARGE}}
					{VARIABLE armorymod.msg.caption (_"Choose a weapon")}
					
					{VARIABLE armorymod.msg.option[0].label (_"Exit")}
					{VARIABLE armorymod.msg.option[0].command.set_variable.name armorymod.inner_menu_break}
					{VARIABLE armorymod.msg.option[0].command.set_variable.value yes}
					
					{VARIABLE armorymod.option_index 1}
					{VARIABLE armorymod.weapon_count ${WEAPON_VAR}.length|}
					[for]
						variable=armorymod.menu_iter
						array={WEAPON_VAR}
						[do]
							{IF_VAR {WEAPON_VAR}.length less_than_equal_to $armorymod.menu_iter| (
								[then]
									[break]
									[/break]
								[/then]
							)}
						
							{VARIABLE armorymod.msg.option[$armorymod.option_index|].image ${WEAPON_VAR}[$armorymod.menu_iter|].icon|}
							{VARIABLE armorymod.msg.option[$armorymod.option_index|].label (_"<b>${WEAPON_VAR}[$armorymod.menu_iter|].description|:</b> ${WEAPON_VAR}[$armorymod.menu_iter|].range|, ${WEAPON_VAR}[$armorymod.menu_iter|].type|, ${WEAPON_VAR}[$armorymod.menu_iter|].damage|x${WEAPON_VAR}[$armorymod.menu_iter|].number|")}
							
							{VARIABLE armorymod.msg.option[$armorymod.option_index|].command.set_variable.name armorymod.weapon_index}
							{VARIABLE armorymod.msg.option[$armorymod.option_index|].command.set_variable.value $armorymod.menu_iter|}
							{VARIABLE armorymod.msg.option[$armorymod.option_index|].command.fire_event.id {SELECTED_EVENT_NAME}}
							
							{VARIABLE_OP armorymod.option_index add 1}
						[/do]
					[/for]
					
					# now we can display all that
					[insert_tag]
						name=message
						variable=armorymod.msg
					[/insert_tag]
					
					# some quick clean up
					{CLEAR_VARIABLE armorymod.msg}
					[for]
						variable=armorymod.menu_iter
						end=$armorymod.weapon_count
						[do]
							[remove_event]
								id=armorymod_weapon_selected_$armorymod.menu_iter|
							[/remove_event]
						[/do]
					[/for]
					{CLEAR_VARIABLE armorymod.weapon_count}
					
					# if they happened to move/destroy the last weapon in the list, this loop can finish
					{IF_VAR {WEAPON_VAR}.length equals 0 (
						[then]
							[break]
							[/break]
						[/then]
					)}
				[/do]
			[/while]
			{CLEAR_VARIABLE armorymod.inner_menu_break}
			{CLEAR_VARIABLE armorymod.inner_menu_index}
		[/else]
	)}

#enddef










